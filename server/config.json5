{
  logLevel: "error",
  listenOn: { port: 8081, address: "0.0.0.0" },
  clientOrigin: "https://jasb.900000000.xyz",

  security: {
    cookies: {
      secret: "CHANGE_ME",
      oldSecrets: [],
      hmacAlgorithm: "sha256",
    },
  },

  performance: {
    gamesCacheDuration: "PT1M",
    leaderboardCacheDuration: "PT1M",
  },

  rules: {
    initialBalance: 1000,
    maxStakeWhileInDebt: 100,
    notableStake: 500,
    minStake: 25,
    gacha: {
      maxPity: 75,
      scrapPerRoll: 5,
      rewards: {
        winBetRolls: 1,
        loseBetScrap: 2,
      }
    },
  },

  store: {
    garbageCollectionFrequency: "PT1H",

    source: {
      host: "storage",
      user: "jasb",
      password: "CHANGE_ME",

      // The maximum number of listener connections for websocket notifications.
      // Note the postgres connection limit is 100 by default, you will need to up it if you need more.
      maxListenConnections: 50,
    },
  },

  auth: {
    // How long a user's session lasts.
    sessionLifetime: "P7D",
    // How many bytes of data to use for session IDs.
    sessionIdSize: 64,
    // How long to allow users to spend logging in before rejecting the log-in.
    stateValidityDuration: "PT5M",

    // What algorithm to use for encrypting secrets, the algorithm chosen here will determine the necessary length
    // of key. See https://github.com/panva/jose/issues/210#jwe-enc for the options.
    // The default "A256CBC-HS512" requires a 64-byte key.
    algorithm: "A256CBC-HS512",
    // A secret token that is used to encrypt sensitive data, generate something secure & random, and keep it safe.
    // `npm run generate-secret` is suitable.
    // Note this will not always run with a placeholder, even in dev, as the length won't match the algorithm.
    key: "CHANGE_ME",

    // How to authenticate upstream with discord.
    discord: {
      clientId: "CHANGE_ME",
      clientSecret: "CHANGE_ME",

      guild: "308515582817468420", // JADS
    },

//    // Allow external services to act on behalf of users.
//    externalServices: {
//      // The name of this server, services must set the audience for tokens to this.
//      identity: "jasb.900000000.xyz"
//      // How long a token is valid for, services should generate tokens on each request so this should be short.
//      tokenLifetime: "PT1M",
//
//      // The services that are allowed.
//      recognised: {
//        // The name of the service, used as the issuer in tokens it issues.
//        "some-service": {
//          // The public key used to sign tokens to prove they come from the service.
//          // This must be an Ed25519 key.
//          publicKey: {
//            // A JSON web key.
//          }
//        }
//      }
//    },
  },

  // If given, will post notification messages to a Discord channel after notable events (new bets, etc...).
  notifier: {
    service: "Discord",
    token: "CHANGE_ME",
    channel: "832764921615089697", // JASB
    // channel: "666328861985865749" // JADS
  },

  // If given, will allow image uploading to the given storage.
  imageUpload: {
    // Oracle Cloud Infrastructure Object Storage
    service: "oci",
    // OCID of the user calling the API. See https://docs.oracle.com/en-us/iaas/Content/API/Concepts/apisigningkey.htm#five
    user: "ocid1.user.oc1..CHANGE_ME",
    // OCID of your tenancy. See https://docs.oracle.com/en-us/iaas/Content/API/Concepts/apisigningkey.htm#five
    tenancy: "ocid1.tenancy.oc1..CHANGE_ME",
    // Fingerprint for the public key that was added to this user. See https://docs.oracle.com/en-us/iaas/Content/API/Concepts/apisigningkey.htm#four
    fingerprint: "12:34:56:78:90:ab:cd:ef:12:34:56:78:90:ab:cd:ef",
    // The private key to use. See https://docs.oracle.com/en-us/iaas/Content/API/Concepts/apisigningkey.htm#two
    // This should be a secret token uri of the key in PEM format in full, with newlines encoded as "/n".
    // It will start with "-----BEGIN PRIVATE KEY-----\n" and end with "\n-----END PRIVATE KEY-----\n"
    privateKey: "CHANGE_ME",
    // Passphrase used for the key, if it is encrypted.
    // If it is not encrypted, do not provide a value.
    //passphrase: "CHANGE_ME",
    // An Oracle Cloud Infrastructure region. See https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm#top
    region: "us-ashburn-1",
    // The namespace the bucket you want to use is in.
    namespace: "abcdefghi",
    // The name of the bucket you want to use.
    bucket: "your-bucket-name",

    name: {
      method: "hash",
      algorithm: "sha256",
    },
    cacheMaxAge: "P90D",
    allowOverwrite: false,
  },

  // If given, will allow avatar caching to the given storage.
  avatarCache: {
    // Oracle Cloud Infrastructure Object Storage
    service: "oci",
    // OCID of the user calling the API. See https://docs.oracle.com/en-us/iaas/Content/API/Concepts/apisigningkey.htm#five
    user: "ocid1.user.oc1..CHANGE_ME",
    // OCID of your tenancy. See https://docs.oracle.com/en-us/iaas/Content/API/Concepts/apisigningkey.htm#five
    tenancy: "ocid1.tenancy.oc1..CHANGE_ME",
    // Fingerprint for the public key that was added to this user. See https://docs.oracle.com/en-us/iaas/Content/API/Concepts/apisigningkey.htm#four
    fingerprint: "12:34:56:78:90:ab:cd:ef:12:34:56:78:90:ab:cd:ef",
    // The private key to use. See https://docs.oracle.com/en-us/iaas/Content/API/Concepts/apisigningkey.htm#two
    // This should be a secret token uri of the key in PEM format in full, with newlines encoded as "/n".
    // It will start with "-----BEGIN PRIVATE KEY-----\n" and end with "\n-----END PRIVATE KEY-----\n"
    privateKey: "CHANGE_ME",
    // Passphrase used for the key, if it is encrypted.
    // If it is not encrypted, do not provide a value.
    //passphrase: "CHANGE_ME",
    // An Oracle Cloud Infrastructure region. See https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm#top
    region: "us-ashburn-1",
    // The namespace the bucket you want to use is in.
    namespace: "abcdefghi",
    // The name of the bucket you want to use.
    bucket: "your-bucket-name",

    name: {
      method: "hash",
      algorithm: "sha256",
    },
    cacheMaxAge: "P90D",
    allowOverwrite: false,

    backgroundTaskFrequency: "PT30M",
    cacheBatchSize: 10,
    garbageCollectBatchSize: 10,
  },
}
